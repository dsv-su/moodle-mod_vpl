{"version":3,"file":"gradeform.min.js","sources":["../src/gradeform.js"],"sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\n//\n// VPL for Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// VPL for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript functions to help grade form\n * @copyright 2012 Juan Carlos Rodr√≠guez-del-Pino, 2021 Astor Bizard\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery'], function($) {\n\n    /**\n     * Apply grade reduction comments to given grade.\n     * @param {Number} grade Original grade.\n     * @param {String} comments Comments with some grade reduction.\n     * @returns {Number} The reduced grade.\n     */\n    function reduceGradeWithComments(grade, comments) {\n        var regDiscount = /^-.+\\((-[0-9.]+)\\)\\s*$/gm;\n        var match;\n        while ((match = regDiscount.exec(comments)) !== null) {\n            var rest = parseFloat(match[1]);\n            if (rest < 0) {\n                grade += rest;\n            }\n        }\n        return grade;\n    }\n\n    /**\n     * Format grade (in points) to a displayable float.\n     * @param {Number} grade Grade to be formatted.\n     * @returns {Number} The formatted grade.\n     */\n    function formatGrade(grade) {\n        // No negative grade.\n        if (grade < 0) {\n            return 0;\n        }\n        // Max two decimal points.\n        return Math.round(100 * grade) / 100;\n    }\n\n    /**\n     * Init method for grade buttons (Merge grade, Calculate).\n     */\n    function setupGradeButtons() {\n        // Calculate button.\n        $('button[data-role=\"calculategrade\"]').click(function() {\n            // Recalculate numeric grade from the max grade,\n            // substracting points found at the end of lines.\n            // Valid reduction format: \"- text (-grade)\".\n            var $form = $(this).closest('form');\n            var text = $form.find('[name=\"comments\"]').val();\n            var grade = parseFloat($(this).data('maxgrade'));\n            grade = formatGrade(reduceGradeWithComments(grade, text));\n            $form.find('[name=\"grade\"]').val(grade);\n        });\n\n        // Merge grade button.\n        $('button[data-role=\"mergegrade\"]').click(function() {\n            // Merge numeric grade from the proposed grade and advancedgrading grid,\n            // substracting points found at the end of lines.\n            // Valid reduction format: \"- text (-grade)\".\n            var $form = $(this).closest('form');\n            var gridpoints = 0;\n            if ($form.find('.score .scorevalue').length > 0) {\n                $form.find('.checked .score .scorevalue')\n                .each(function() {\n                    gridpoints += Number($(this).text());\n                });\n            } else {\n                $form.find('.score input')\n                .each(function() {\n                    gridpoints += Number($(this).val());\n                });\n            }\n            var advancedgradingcomments = '';\n            $form.find('.criterion .remark textarea')\n            .each(function() {\n                advancedgradingcomments += $(this).val() + \"\\n\";\n            });\n            gridpoints = reduceGradeWithComments(gridpoints, advancedgradingcomments);\n\n            var maxgrade = $(this).data('maxgrade');\n            var currentgrade = $(this).data('currentgrade');\n            var maxgridpoints = $(this).data('maxgridpoints');\n\n            var grade = formatGrade(currentgrade - maxgridpoints * (currentgrade / maxgrade) + gridpoints);\n            $form.find('[name=\"grade\"]').val(grade);\n\n            var $comments = $form.find('[name=\"comments\"]');\n            var text = $comments.val();\n\n            var gridtag = '#Grid grade';\n            var gridcomment = gridtag + ': ' + grade;\n            if (text.search(gridtag) < 0) {\n                text = gridcomment + \"\\n\" + text;\n            } else {\n                text = text.replace(new RegExp(gridtag + '.*'), gridcomment);\n            }\n            var proposedtag = '#Proposed grade';\n            var proposedcomment = proposedtag + ': ' + currentgrade;\n            if (text.search(proposedtag) < 0) {\n                text = proposedcomment + \"\\n\" + text;\n            } else {\n                text = text.replace(new RegExp(proposedtag + '.*'), proposedcomment);\n            }\n\n            $comments.val(text);\n        });\n    }\n\n    /**\n     * Init method for import buttons.\n     */\n    function setupImportButtons() {\n        $('button[data-role=\"importfromsub\"]').click(function() {\n            var $form = $(this).closest('form');\n            // Set grade and comments.\n            $form.find('[name=\"grade\"]').val($(this).data('grade'));\n            $form.find('[name=\"comments\"]').val($(this).data('comments'));\n\n            // Set advanced grading data:\n\n            // First, reset the fields.\n            $('#advancedgrading-criteria .criterion .remark textarea').val('');\n            $('#advancedgrading-criteria .criterion .score input').val('');\n            // Handle rubric level selection slightly differently:\n            // we trigger a click on it, so it updates its UI correctly.\n            $('#advancedgrading-criteria .criterion .level.checked').click();\n\n            // Then, set the fields to their new values.\n            $(this).data('advgrading').forEach(function(criterion) {\n                var id = criterion.criterionid;\n                if (typeof (criterion.remark) !== 'undefined') {\n                    $form.find('[name=\"advancedgrading[criteria][' + id + '][remark]\"]').val(criterion.remark);\n                }\n                if (typeof (criterion.score) !== 'undefined') {\n                    $form.find('[name=\"advancedgrading[criteria][' + id + '][score]\"]').val(parseFloat(criterion.score));\n                }\n                // Handle rubric level selection slightly differently:\n                // we trigger a click on it, so it updates its UI correctly.\n                if (typeof (criterion.levelid) !== 'undefined') {\n                    $('#advancedgrading-criteria-' + id + '-levels-' + criterion.levelid).click();\n                }\n            });\n        });\n    }\n\n    return {\n        setup: function() {\n            setupGradeButtons();\n            setupImportButtons();\n        },\n        updateSubmissionsList: function(submissionID, gradeData, nexturl) {\n            if (opener !== null) {\n                $(opener.document).find('#g' + submissionID).html(gradeData.grade);\n                $(opener.document).find('#m' + submissionID).html(gradeData.grader);\n                $(opener.document).find('#o' + submissionID).html(gradeData.gradedon);\n                $(opener.document).find('#c' + submissionID).html(gradeData.comments);\n                $(opener.document).find('.gd' + submissionID).css('color', '').css('backgroundColor', '');\n            }\n            if (nexturl) {\n                if (opener === null) {\n                    window.close();\n                }\n                var nextrow = $(opener.document).find('#g' + submissionID).closest('tr').next();\n                if (nextrow.length == 0) {\n                    window.close();\n                }\n                var nextid = nextrow.html().match(/user\\/view\\.php\\?(.*?)id=([0-9]+)/)[2];\n                if (nextid) {\n                    location.replace(nexturl + nextid);\n                } else {\n                    window.close();\n                }\n            }\n        },\n        highlightSubmission: function(submissionID) {\n            if (opener !== null) {\n                $(opener.document).find('.gd' + submissionID).css('color', 'black').css('backgroundColor', 'yellow');\n                window.onunload = function() {\n                    $(opener.document).find('.gd' + submissionID).css('color', '').css('backgroundColor', '');\n                };\n            }\n        }\n    };\n});\n"],"names":["define","$","reduceGradeWithComments","grade","comments","match","regDiscount","exec","rest","parseFloat","formatGrade","Math","round","setup","click","$form","this","closest","text","find","val","data","gridpoints","length","each","Number","advancedgradingcomments","maxgrade","currentgrade","$comments","gridcomment","gridtag","proposedcomment","proposedtag","search","replace","RegExp","forEach","criterion","id","criterionid","remark","score","levelid","updateSubmissionsList","submissionID","gradeData","nexturl","opener","document","html","grader","gradedon","css","window","close","nextrow","next","nextid","location","highlightSubmission","onunload"],"mappings":"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"}